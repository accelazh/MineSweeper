1. UI换肤设计，目前发现三种方法：
	1. UI类从一个资源管理器取资源，通过配置资源管理器，更换不同的皮肤。但这样做破坏了Swing原本UI对象的
	   Java Bean的Getter和Setting配置方式风格
	2. UI类不涉及任何换肤功能，仅仅提供足够多的Getting和Setter以配置。外界使用UI类，并通过Getter和Setter
	        进行皮肤配置。换肤功能通过外界切入UI类，而不是UI类从外界拉资源的模式。这种方式的UI类风格与可复用控件
	        一致，简单可复用。
	3. 千千静听的皮肤方式，打破Swing的靠控件累界面的模式。千千静听的皮肤，需要你提供几张图作为界面外观，然后
	        你提各个按钮的位置。这种方式下，千千静听可以做出变化无穷，及其华丽的外观。界面上的很多东西，其实不是
	        控件，纯粹就是一张图。

	本程序使用的第2种方式。
	
2. MVC设计。
   Model可以藏在一个接口背后，View也可以藏在一个接口背后。Controller作为粘合剂把二者粘合起来。不仅仅可以只有
一对Model、View，具有显示-数据这样的模式的东西都可以做成Model-View模式，项目由各个Model-View组装起来，通过
Controller连接成一张图。
   Model-View只要一用，通过事件进行通信的方式就会让项目很复杂——Model-View本身就会引入相当的复杂性。但是如果
项目本身的复杂度远远超出Model-View自身的复杂性，那么使用Model-View就会化解掉相当的复杂性。

3. 没想到模仿Windows扫雷，如果把功能做全了，最后会这么复杂。最后赶时间，所以有些地方的实现会有点混乱。
4. 扫雷的旗子计数器其实是有负数的，真心蛋疼...
5. 我的控制器接收全部事件，包括mouseMove。格子40*70时，出现卡机现象，性能的瓶颈在全屏repaint上，已修正。
6. Linux下运行一堆问题
